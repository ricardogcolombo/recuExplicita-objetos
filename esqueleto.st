TestCase subclass: #TestEj1	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TestEj1 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/6/2018 23:24'!test1_1_regex	|e a b aaa a_b ab|		e := Regex empty.	a := Regex a.	b := Regex b.	aaa := a star.	a_b := a | b.	ab := a , b.		self assert: e isNotNil.	self assert: a isNotNil.	self assert: b isNotNil.	self assert: a_b isNotNil.	self assert: aaa isNotNil.	self assert: ab isNotNil.		self assert: a value equals: $a.	self assert: b value equals: $b.	self assert: aaa value equals: a.	self assert: a_b option1 equals: a.	self assert: a_b option2 equals: b.	self assert: ab prefix equals: a.	self assert: ab suffix equals: b.! !TestCase subclass: #TestEj2	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TestEj2 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/6/2018 03:48'!test2_1_hasStar	|e a b c aaa b_c aaab_c|		e := Regex empty.	a := Regex a.	b := Regex b.	c := Regex c.	aaa := a star.	b_c := b | c.	aaab_c := aaa , b_c.		self assert: aaa hasStar.	self assert: aaab_c hasStar.	self assert: e hasStar not.	self assert: a hasStar not.	self assert: b_c hasStar not.! !!TestEj2 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/7/2018 21:53'!test2_2_printString	|e a b c aaa abc b_c aaab_c|		e := Regex empty.	a := Regex a.	b := Regex b.	c := Regex c.	aaa := a star.	abc := a , b , c.	b_c := b | c.	aaab_c := aaa , b_c.		self assert: e printString equals: 'empty'.	self assert: a printString equals: 'a'.	self assert: abc printString equals: 'abc'.	self assert: b_c printString equals: '(b|c)'.	self assert: aaa printString equals: '(a)*'.	self assert: aaab_c printString equals: '(a)*(b|c)'.! !TestCase subclass: #TestEj3	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TestEj3 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/7/2018 00:10'!test3_1_minLength	|e a b c aaa b_c aaab_c min|		e := Regex empty.	a := Regex a.	b := Regex b.	c := Regex c.	aaa := a star.	b_c := b | c.	aaab_c := aaa , b_c.	min := [:x :y | x min: y].		self assert: (aaa length: min) equals: 0.	self assert: (aaab_c length: min) equals: 1.	self assert: (e length: min) equals: 0.	self assert: (a length: min) equals: 1.	self assert: (b_c length: min) equals: 1.! !!TestEj3 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/7/2018 00:09'!test3_2_maxLength	|e a b c aaa b_c aaab_c max|		e := Regex empty.	a := Regex a.	b := Regex b.	c := Regex c.	aaa := a star.	b_c := b | c.	aaab_c := aaa , b_c.	max := [:x :y | x max: y].		self assert: (aaa length: max) isInfinite.	self assert: (aaab_c length: max) isInfinite.	self assert: (e length: max) equals: 0.	self assert: (a length: max) equals: 1.	self assert: (b_c length: max) equals: 1.! !TestCase subclass: #TestEj4	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TestEj4 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/7/2018 00:06'!test4_2_char	|a b|		a := Regex a.	b := Regex b.		self assert: (a match: 'a').	self assert: (a match: '') not.	self assert: (a match: 'b') not.	self assert: (a match: 'ab') not.		self assert: (b match: 'b').	self assert: (b match: '') not.	self assert: (b match: 'a') not.	self assert: (b match: 'ba') not.! !!TestEj4 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/7/2018 00:06'!test4_3_concat	|a b ab|		a := Regex a.	b := Regex b.	ab := a , b.		self assert: (ab match: 'ab').	self assert: (ab match: '') not.	self assert: (ab match: 'a') not.	self assert: (ab match: 'aba') not.! !!TestEj4 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/7/2018 00:06'!test4_1_empty	|e|		e := Regex empty.		self assert: (e match: '').	self assert: (e match: 'a') not.! !!TestEj4 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/7/2018 00:07'!test4_4_or	|a b a_b|		a := Regex a.	b := Regex b.	a_b := a | b.		self assert: (a_b match: 'a').	self assert: (a_b match: 'b').	self assert: (a_b match: '') not.	self assert: (a_b match: 'ab') not.	self assert: (a_b match: 'ba') not.! !!TestEj4 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/7/2018 00:08'!test4_5_star	|a aaa|		a := Regex a.	aaa := a star.		self assert: (aaa match: '').	self assert: (aaa match: 'a').	self assert: (aaa match: 'aa').	self assert: (aaa match: ('a' repeat: (Random new nextInt: 10))).	self assert: (aaa match: 'b') not.	self assert: (aaa match: 'ab') not.	self assert: (aaa match: 'aab') not.! !!TestEj4 methodsFor: 'tests' stamp: 'EdgardoZoppi 6/11/2018 22:32'!test4_6_match	|a b c b_c aaa aaab_c bbbb|		a := Regex a.	b := Regex b.	c := Regex c.	aaa := a star.	b_c := b | c.	aaab_c := aaa , b_c.	bbbb := b star , b.		self assert: (aaab_c match: 'b').	self assert: (aaab_c match: 'c').	self assert: (aaab_c match: 'ab').	self assert: (aaab_c match: 'ac').	self assert: (aaab_c match: 'aab').	self assert: (aaab_c match: 'aaac').	self assert: (bbbb match: 'b').	self assert: (bbbb match: 'bb').	self assert: (bbbb match: 'bbb').	self assert: (bbbb match: '') not.	self assert: (aaab_c match: '') not.	self assert: (aaab_c match: 'a') not.	self assert: (aaab_c match: 'aa') not.	self assert: (aaab_c match: 'aaa') not.	self assert: (aaab_c match: 'ba') not.	self assert: (aaab_c match: 'ca') not.! !